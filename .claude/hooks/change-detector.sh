#!/usr/bin/env bash
# BMAD Change Detection Hook for BMAD-CC
# Automatically detects and triggers change management processes

set -e

# Parameters
EVENT_TYPE="${1:-}"
FILE_PATH="${2:-}"

# Configuration
PROJECT_NAME="BMAD-CC"
CHANGES_DIR="docs/changes"
VALIDATION_DIR="docs/validation"

# Color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RED='\033[0;31m'
GRAY='\033[0;90m'
NC='\033[0m'

# Ensure directories exist
mkdir -p "$CHANGES_DIR" "$VALIDATION_DIR"

# Function to detect scope change
detect_scope_change() {
    local file_path="$1"
    local content="$2"
    
    local indicators=(
        "TODO|FIXME|HACK"
        "new requirement"
        "change request"
        "scope change"
        "additional feature"
        "modify existing"
    )
    
    for indicator in "${indicators[@]}"; do
        if echo "$content" | grep -qiE "$indicator"; then
            return 0
        fi
    done
    
    return 1
}

# Function to detect architecture change
detect_architecture_change() {
    local file_path="$1"
    local content="$2"
    
    local indicators=(
        "new technology"
        "database change"
        "API change"
        "integration change"
        "architecture update"
        "breaking change"
    )
    
    for indicator in "${indicators[@]}"; do
        if echo "$content" | grep -qiE "$indicator"; then
            return 0
        fi
    done
    
    return 1
}

# Function to detect requirements change
detect_requirements_change() {
    local file_path="$1"
    local content="$2"
    
    local indicators=(
        "user story change"
        "acceptance criteria"
        "functional requirement"
        "non-functional requirement"
        "requirement change"
        "specification change"
    )
    
    for indicator in "${indicators[@]}"; do
        if echo "$content" | grep -qiE "$indicator"; then
            return 0
        fi
    done
    
    return 1
}

# Function to create change record
create_change_record() {
    local change_type="$1"
    local file_path="$2"
    local description="$3"
    
    local change_id="CHG-$(date +%Y%m%d-%H%M%S)"
    local change_file="$CHANGES_DIR/$change_id.md"
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    
    echo -e "${CYAN}📝 Creating change record: $change_id${NC}"
    
    cat > "$change_file" <<EOF
# Change Record: $change_id

**Type:** $change_type  
**Date Detected:** $timestamp  
**Project:** $PROJECT_NAME  
**Affected File:** $file_path  

## Change Description
$description

## Impact Assessment
- [ ] Scope impact analysis required
- [ ] Architecture review needed
- [ ] Requirements validation required
- [ ] Timeline impact assessment
- [ ] Resource allocation review

## Change Approval
- [ ] Product Owner approval
- [ ] Architecture review (if applicable)
- [ ] Stakeholder notification
- [ ] Implementation planning

## Implementation
- [ ] Change implementation completed
- [ ] Testing completed
- [ ] Documentation updated
- [ ] Change validated

---
*Auto-generated by BMAD Change Detector*
EOF
    
    echo -e "${GREEN}✅ Change record created: $change_file${NC}"
    
    # Create marker file for pending changes
    echo "$change_id" > ".bmad-change-pending"
    
    return 0
}

# Function to trigger change management
trigger_change_management() {
    local change_type="$1"
    local file_path="$2"
    local severity="${3:-medium}"
    
    echo -e "${YELLOW}⚠️ CHANGE DETECTED: $change_type in $file_path${NC}"
    
    case "$change_type" in
        "scope")
            echo -e "${YELLOW}📋 Scope change detected - Product Owner review required${NC}"
            create_change_record "Scope Change" "$file_path" "Potential scope change detected in document content"
            ;;
        "architecture")
            echo -e "${YELLOW}🏗️ Architecture change detected - System Architect review required${NC}"
            create_change_record "Architecture Change" "$file_path" "Architecture modification detected"
            ;;
        "requirements")
            echo -e "${YELLOW}📝 Requirements change detected - Validation required${NC}"
            create_change_record "Requirements Change" "$file_path" "Requirements modification detected"
            ;;
    esac
    
    # Trigger validation if needed
    case "$severity" in
        "high"|"critical")
            echo -e "${RED}🚨 HIGH IMPACT CHANGE - Immediate validation required${NC}"
            echo -e "${YELLOW}Run: validation-enforcer.sh change-request${NC}"
            ;;
        "medium")
            echo -e "${YELLOW}📊 MEDIUM IMPACT CHANGE - Validation recommended${NC}"
            ;;
        "low")
            echo -e "${GRAY}📌 LOW IMPACT CHANGE - Monitoring only${NC}"
            ;;
    esac
}

# Function to analyze file changes
analyze_file_changes() {
    local changed_files="$1"
    
    echo -e "${CYAN}🔍 Analyzing changed files for impact...${NC}"
    
    while IFS= read -r file; do
        [ -z "$file" ] && continue
        
        # Skip non-existent files
        [ ! -f "$file" ] && continue
        
        local content=$(cat "$file" 2>/dev/null || echo "")
        
        # Check file patterns for high-impact changes
        case "$file" in
            *prd*.md|*requirements*.md|*product*.md)
                echo -e "${YELLOW}📋 PRD/Requirements file changed: $file${NC}"
                if detect_requirements_change "$file" "$content"; then
                    trigger_change_management "requirements" "$file" "high"
                fi
                ;;
            *architecture*.md|*system*.md|*design*.md)
                echo -e "${YELLOW}🏗️ Architecture file changed: $file${NC}"
                if detect_architecture_change "$file" "$content"; then
                    trigger_change_management "architecture" "$file" "high"
                fi
                ;;
            *story*.md|*epic*.md)
                echo -e "${YELLOW}📖 Story/Epic file changed: $file${NC}"
                if detect_scope_change "$file" "$content"; then
                    trigger_change_management "scope" "$file" "medium"
                fi
                ;;
            *.md)
                # General markdown file analysis
                if detect_scope_change "$file" "$content"; then
                    trigger_change_management "scope" "$file" "low"
                elif detect_architecture_change "$file" "$content"; then
                    trigger_change_management "architecture" "$file" "medium"
                elif detect_requirements_change "$file" "$content"; then
                    trigger_change_management "requirements" "$file" "medium"
                fi
                ;;
        esac
    done <<< "$changed_files"
}

# Function to check pending changes
check_pending_changes() {
    echo -e "\n${CYAN}📊 Pending Changes Status${NC}"
    echo "=================================="
    
    if [ -f ".bmad-change-pending" ]; then
        local pending_change=$(cat ".bmad-change-pending")
        echo -e "${YELLOW}⏳ Pending Change: $pending_change${NC}"
        
        if [ -f "$CHANGES_DIR/$pending_change.md" ]; then
            echo -e "${GRAY}📄 Change Record: $CHANGES_DIR/$pending_change.md${NC}"
            
            # Check if change has been approved
            if grep -q "\\[x\\].*approval" "$CHANGES_DIR/$pending_change.md"; then
                echo -e "${GREEN}✅ Change has approvals - ready to proceed${NC}"
            else
                echo -e "${YELLOW}⚠️ Change pending approvals${NC}"
            fi
        fi
    else
        echo -e "${GREEN}✅ No pending changes${NC}"
    fi
    
    # Show recent change records
    local recent_changes=$(find "$CHANGES_DIR" -name "CHG-*.md" -mtime -7 2>/dev/null | wc -l)
    echo -e "${GRAY}📈 Recent Changes (7 days): $recent_changes${NC}"
    
    echo "=================================="
}

# Function to complete change
complete_change() {
    local change_id="$1"
    
    if [ -z "$change_id" ]; then
        if [ -f ".bmad-change-pending" ]; then
            change_id=$(cat ".bmad-change-pending")
        else
            echo -e "${RED}❌ No change ID provided and no pending change found${NC}"
            return 1
        fi
    fi
    
    local change_file="$CHANGES_DIR/$change_id.md"
    
    if [ ! -f "$change_file" ]; then
        echo -e "${RED}❌ Change record not found: $change_file${NC}"
        return 1
    fi
    
    # Mark change as completed
    local completion_date=$(date "+%Y-%m-%d %H:%M:%S")
    echo "" >> "$change_file"
    echo "## Change Completion" >> "$change_file"
    echo "**Completed:** $completion_date" >> "$change_file"
    echo "**Status:** COMPLETED" >> "$change_file"
    
    # Remove pending marker
    [ -f ".bmad-change-pending" ] && rm ".bmad-change-pending"
    
    echo -e "${GREEN}✅ Change $change_id marked as completed${NC}"
}

# Main execution
case "$EVENT_TYPE" in
    "file-changed")
        if [ -n "$FILE_PATH" ] && [ -f "$FILE_PATH" ]; then
            analyze_file_changes "$FILE_PATH"
        else
            echo -e "${YELLOW}⚠️ File path not provided or file not found${NC}"
        fi
        ;;
    
    "check-pending-changes")
        check_pending_changes
        ;;
    
    "complete-change")
        complete_change "$FILE_PATH"
        ;;
    
    "analyze-git-changes")
        # Analyze recent git changes
        local git_changes=$(git diff --name-only HEAD~1 2>/dev/null || git diff --name-only --cached 2>/dev/null || true)
        if [ -n "$git_changes" ]; then
            analyze_file_changes "$git_changes"
        else
            echo -e "${GRAY}No recent changes detected${NC}"
        fi
        ;;
    
    "status")
        check_pending_changes
        ;;
    
    *)
        if [ -n "$EVENT_TYPE" ]; then
            echo "Unknown event type: $EVENT_TYPE" >&2
        fi
        echo "Valid event types: file-changed, check-pending-changes, complete-change, analyze-git-changes, status"
        exit 1
        ;;
esac