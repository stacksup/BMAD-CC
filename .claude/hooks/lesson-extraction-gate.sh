#!/usr/bin/env bash
# Lesson Extraction Gate for BMAD-CC
# Ensures lessons learned are captured from completed work

set -e

# Configuration
PROJECT_NAME="BMAD-CC"
LESSONS_DIR="docs/lessons"
DISABLE_GATES="${BMAD_DISABLE_GATES:-0}"

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
GRAY='\033[0;90m'
NC='\033[0m'

# Ensure lessons directory exists
mkdir -p "$LESSONS_DIR"

# Function to check if lessons exist for completed work
check_lesson_requirements() {
    local changed_files="$1"
    local missing_lessons=()
    
    # Check for completed stories/tasks that need lessons
    while IFS= read -r file; do
        [ -z "$file" ] && continue
        [ ! -f "$file" ] && continue
        
        case "$file" in
            docs/story-notes/TASK-*.md)
                # Extract task ID from filename
                local task_id=$(basename "$file" .md | sed 's/TASK-//')
                local lesson_file="$LESSONS_DIR/task-$task_id.md"
                
                # Check if task is marked as completed
                if grep -q "Status.*[Cc]ompleted\|Status.*[Dd]one" "$file"; then
                    if [ ! -f "$lesson_file" ]; then
                        missing_lessons+=("Task $task_id: $lesson_file")
                    fi
                fi
                ;;
                
            docs/validation/*.md)
                # Check for completed validations that might need lessons
                if grep -q "APPROVED\|DONE" "$file"; then
                    local validation_type=$(basename "$file" | cut -d'-' -f1)
                    local lesson_file="$LESSONS_DIR/$validation_type-lessons.md"
                    
                    # Only require lessons for major validations
                    case "$validation_type" in
                        architecture|prd|project-setup)
                            if [ ! -f "$lesson_file" ]; then
                                missing_lessons+=("$validation_type validation: $lesson_file")
                            fi
                            ;;
                    esac
                fi
                ;;
        esac
    done <<< "$changed_files"
    
    echo "${#missing_lessons[@]}"
    
    # Print missing lessons
    for lesson in "${missing_lessons[@]}"; do
        echo -e "${YELLOW}üìö Missing lesson: $lesson${NC}" >&2
    done
}

# Function to create lesson template
create_lesson_template() {
    local lesson_type="$1"
    local identifier="$2"
    local lesson_file="$3"
    
    echo -e "${CYAN}üìù Creating lesson template: $lesson_file${NC}"
    
    local current_date=$(date "+%Y-%m-%d")
    
    cat > "$lesson_file" <<EOF
# Lessons Learned: $lesson_type $identifier

**Date:** $current_date  
**Project:** $PROJECT_NAME  
**Type:** $lesson_type  
**Context:** $identifier  

## What Went Well
- [Add positive outcomes and successful approaches]
- [What worked better than expected?]
- [What would you repeat in future similar situations?]

## What Could Be Improved
- [Add challenges faced and potential solutions]
- [What took longer than expected and why?]
- [What would you do differently next time?]

## Key Insights
- [Add important discoveries or realizations]
- [Technical insights that could benefit future work]
- [Process improvements identified]

## Actionable Recommendations
- [ ] [Specific action items for future similar work]
- [ ] [Process changes to implement]
- [ ] [Documentation updates needed]
- [ ] [Training or knowledge sharing opportunities]

## Related Resources
- [Links to relevant documentation]
- [References to similar past work]
- [Useful external resources discovered]

## Impact Assessment
**Knowledge Value:** [High/Medium/Low]  
**Reusability:** [High/Medium/Low]  
**Priority for Sharing:** [High/Medium/Low]  

## Distribution
- [ ] Shared with team
- [ ] Added to knowledge base
- [ ] Incorporated into process documentation
- [ ] Used for training materials

---
*Template generated by BMAD Lesson Extraction Gate*
EOF
    
    echo -e "${GREEN}‚úÖ Lesson template created: $lesson_file${NC}"
    echo -e "${GRAY}Please fill out the template with actual lessons learned${NC}"
}

# Function to extract lessons from task master
extract_task_lessons() {
    local task_id="$1"
    
    # Try to get task details from Task Master
    local task_details=""
    if command -v task-master &> /dev/null; then
        task_details=$(task-master show "$task_id" --json 2>/dev/null || true)
    elif command -v npx &> /dev/null; then
        task_details=$(npx task-master show "$task_id" --json 2>/dev/null || true)
    fi
    
    if [ -n "$task_details" ] && [ "$task_details" != "Task not found" ]; then
        # Extract basic info (simple JSON parsing)
        local title=$(echo "$task_details" | grep -o '"title"[[:space:]]*:[[:space:]]*"[^"]*"' | head -1 | sed 's/.*: *"\(.*\)"/\1/')
        local description=$(echo "$task_details" | grep -o '"description"[[:space:]]*:[[:space:]]*"[^"]*"' | head -1 | sed 's/.*: *"\(.*\)"/\1/')
        
        echo "Task: $title"
        echo "Description: $description"
    fi
}

# Function to show lesson extraction status
show_lesson_status() {
    echo -e "\n${CYAN}üìö Lesson Extraction Status for $PROJECT_NAME${NC}"
    echo "============================================="
    
    if [ "$DISABLE_GATES" = "1" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Lesson extraction gates are DISABLED${NC}"
    else
        echo -e "${GREEN}‚úÖ Lesson extraction gates are ENABLED${NC}"
    fi
    
    # Count existing lessons
    local lesson_count=$(find "$LESSONS_DIR" -name "*.md" 2>/dev/null | wc -l)
    echo -e "${GRAY}üìñ Total lessons documented: $lesson_count${NC}"
    
    # Count completed tasks without lessons
    local completed_tasks=$(find docs/story-notes -name "TASK-*.md" -exec grep -l "Status.*[Cc]ompleted\|Status.*[Dd]one" {} \; 2>/dev/null | wc -l)
    echo -e "${GRAY}‚úÖ Completed tasks: $completed_tasks${NC}"
    
    # Show recent lessons
    echo -e "\n${CYAN}Recent Lessons (last 7 days):${NC}"
    find "$LESSONS_DIR" -name "*.md" -mtime -7 2>/dev/null | while read -r lesson; do
        echo -e "${GRAY}  üìö $(basename "$lesson")${NC}"
    done
    
    echo "============================================="
}

# Function to validate lesson quality
validate_lesson_quality() {
    local lesson_file="$1"
    local issues=0
    
    if [ ! -f "$lesson_file" ]; then
        echo -e "${RED}‚ùå Lesson file not found: $lesson_file${NC}" >&2
        return 1
    fi
    
    local content=$(cat "$lesson_file")
    
    # Check for template placeholders
    if echo "$content" | grep -q "\[Add.*\]\|\[What.*\?\]\|\[Specific.*\]"; then
        echo -e "${YELLOW}‚ö†Ô∏è Lesson contains template placeholders${NC}" >&2
        ((issues++))
    fi
    
    # Check for minimum content
    local word_count=$(echo "$content" | wc -w)
    if [ "$word_count" -lt 50 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Lesson appears too brief (< 50 words)${NC}" >&2
        ((issues++))
    fi
    
    # Check for required sections
    local required_sections=("What Went Well" "What Could Be Improved" "Key Insights")
    for section in "${required_sections[@]}"; do
        if ! echo "$content" | grep -q "$section"; then
            echo -e "${YELLOW}‚ö†Ô∏è Missing required section: $section${NC}" >&2
            ((issues++))
        fi
    done
    
    if [ $issues -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Lesson quality validation passed${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è Lesson quality validation found $issues issues${NC}"
        return $issues
    fi
}

# Main execution
case "${1:-check}" in
    check)
        if [ "$DISABLE_GATES" = "1" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è Lesson extraction gates disabled (BMAD_DISABLE_GATES=1)${NC}"
            exit 0
        fi
        
        echo -e "${CYAN}üìö Running Lesson Extraction Gate${NC}"
        
        # Get changed files
        local changed_files
        if ! changed_files=$(git diff --name-only HEAD~1 2>/dev/null); then
            changed_files=$(git diff --name-only --cached 2>/dev/null || git diff --name-only 2>/dev/null || true)
        fi
        
        if [ -z "$changed_files" ]; then
            echo -e "${GRAY}No changed files to check${NC}"
            exit 0
        fi
        
        local missing_count
        missing_count=$(check_lesson_requirements "$changed_files")
        
        if [ "$missing_count" -gt 0 ]; then
            echo -e "\n${YELLOW}üìö Lesson Extraction Required${NC}"
            echo -e "${YELLOW}$missing_count completed items need lessons documented${NC}"
            echo -e "${GRAY}Run 'lesson-extraction-gate.sh create-templates' to generate templates${NC}"
            echo -e "${GRAY}Or set BMAD_DISABLE_GATES=1 to skip (not recommended)${NC}"
            
            # Don't fail the gate, just warn
            echo -e "\n${YELLOW}‚ö†Ô∏è Proceeding with warning - please document lessons when possible${NC}"
        else
            echo -e "\n${GREEN}‚úÖ Lesson Extraction Gate Passed${NC}"
        fi
        ;;
    
    create-templates)
        echo -e "${CYAN}üìù Creating lesson templates for completed work...${NC}"
        
        # Find completed tasks without lessons
        find docs/story-notes -name "TASK-*.md" 2>/dev/null | while read -r story_file; do
            if grep -q "Status.*[Cc]ompleted\|Status.*[Dd]one" "$story_file"; then
                local task_id=$(basename "$story_file" .md | sed 's/TASK-//')
                local lesson_file="$LESSONS_DIR/task-$task_id.md"
                
                if [ ! -f "$lesson_file" ]; then
                    create_lesson_template "Task" "$task_id" "$lesson_file"
                fi
            fi
        done
        ;;
    
    validate)
        local lesson_file="${2:-}"
        if [ -z "$lesson_file" ]; then
            echo "Usage: lesson-extraction-gate.sh validate <lesson-file>" >&2
            exit 1
        fi
        validate_lesson_quality "$lesson_file"
        ;;
    
    status)
        show_lesson_status
        ;;
    
    *)
        echo "Unknown command: $1" >&2
        echo "Valid commands: check, create-templates, validate, status"
        exit 1
        ;;
esac