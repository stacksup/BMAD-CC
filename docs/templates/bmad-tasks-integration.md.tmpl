# BMAD Tasks Integration Guide

**Project:** BMAD-CC (Framework)  
**Created:** 2025-08-13  

## Purpose

This document outlines how the original BMAD tasks enhance our BMAD-CC framework and provides implementation guidance for integrating these sophisticated capabilities.

## Task Categories and Integration Points

### 1. Interactive Elicitation Enhancement

**Task**: `advanced-elicitation.md`
**Integrates With**: All strategic agents (Business Analyst, Product Manager, System Architect, UX Expert)

**Enhancement**: 
- Makes template-based document creation interactive
- Provides 9 elicitation methods for deepening content quality
- Supports iterative refinement during document creation

**Implementation**:
- Reference advanced elicitation during template usage
- Use after outputting each major section for user feedback
- Integrate with our existing elicitation framework template

**Agent Integration**:
```markdown
## Advanced Elicitation Process
After completing each template section:
1. Present section for user review
2. Offer 9 elicitation method options (0-8) plus "Proceed" (9)
3. Execute selected method for content improvement
4. Repeat until user selects "Proceed"
```

### 2. Story Creation and Validation System

**Tasks**: `create-next-story.md`, `validate-next-story.md`
**Integrates With**: Scrum Master Agent, Product Owner Agent

**Enhancement**:
- Systematic story creation from PRD and architecture documents
- Comprehensive story validation before implementation
- Anti-hallucination verification for technical accuracy
- Implementation readiness assessment

**Implementation**:
- Replace basic story creation in sm-agent with create-next-story process
- Add validate-next-story as PO agent capability
- Create story templates with proper sequencing and validation

**Workflow Integration**:
```markdown
## Enhanced Story Development Process
1. SM Agent: Use create-next-story task for systematic story preparation
2. PO Agent: Use validate-next-story task for quality assurance
3. Dev Agent: Receive validated, implementation-ready stories
4. QA Agent: Reference validation results for review context
```

### 3. Brownfield Project Documentation

**Task**: `document-project.md`
**Integrates With**: System Architect Agent, Business Analyst Agent

**Enhancement**:
- Creates brownfield architecture documents reflecting actual system state
- Documents technical debt, workarounds, and constraints
- Provides realistic foundation for enhancement planning
- AI-optimized documentation for agent consumption

**Implementation**:
- Add as System Architect agent capability for existing projects
- Reference in brownfield enhancement workflow planning phase
- Use for system analysis when documentation is inadequate

**Integration Points**:
```markdown
## Brownfield Documentation Process
1. Business Analyst: Identify enhancement scope and requirements
2. System Architect: Use document-project task if system docs inadequate
3. Output: Comprehensive brownfield architecture document
4. Handoff: Enhanced documentation enables safer enhancement planning
```

### 4. Document Sharding System

**Task**: `shard-doc.md`
**Integrates With**: Product Owner Agent

**Enhancement**:
- Automated splitting of large documents by level 2 sections
- Maintains content integrity and proper markdown formatting
- Creates development-consumable document structure
- Optional integration with markdown-tree-parser for automation

**Implementation**:
- Add as Product Owner agent capability for document preparation
- Use in all workflows requiring "document sharding"
- Support both automated (md-tree) and manual sharding approaches

**Process Integration**:
```markdown
## Document Sharding Process
1. Strategic Planning: Creates comprehensive documents
2. Product Owner: Uses shard-doc task for development preparation
3. Output: docs/prd/ and docs/architecture/ with focused sections
4. Development: Agents consume sharded documents for implementation
```

### 5. Advanced Brownfield Story Creation

**Tasks**: `brownfield-create-epic.md`, `brownfield-create-story.md`, `create-brownfield-story.md`
**Integrates With**: Product Manager Agent, Scrum Master Agent

**Enhancement**:
- Three-tier brownfield story creation based on complexity
- Single story (< 4 hours) â†’ Small epic (1-3 stories) â†’ Full brownfield planning
- Safety-first approach with existing system integrity protection
- Realistic integration planning with technical constraints

**Implementation**:
- Enhance our brownfield enhancement workflow with these classification levels
- Add as PM agent capabilities for brownfield work
- Integrate with smart-cycle routing for complexity assessment

**Classification System**:
```markdown
## Brownfield Enhancement Classification
1. **Single Story** (< 4 hours): Use brownfield-create-story task
2. **Small Epic** (1-3 stories): Use brownfield-create-epic task  
3. **Major Enhancement**: Use full brownfield planning workflow
4. **Smart Routing**: Smart-cycle classifies and routes appropriately
```

### 6. AI Frontend Generation

**Task**: `generate-ai-frontend-prompt.md`
**Integrates With**: UX Expert Agent

**Enhancement**:
- Creates optimized prompts for AI frontend generation tools (v0, Lovable, etc.)
- Structured prompting framework for high-quality output
- Integration with existing UX specifications and architecture
- Mobile-first approach with responsive considerations

**Implementation**:
- Add as UX Expert agent capability for AI UI generation
- Reference in greenfield and brownfield workflows
- Support integration with external AI tools

**Process Flow**:
```markdown
## AI Frontend Generation Process
1. UX Expert: Complete UX design specification
2. UX Expert: Use generate-ai-frontend-prompt for external tool integration
3. User: Generate UI foundation with AI tool (v0, Lovable, etc.)
4. Developer: Integrate generated foundation with architecture requirements
```

### 7. Change Management and Course Correction

**Task**: `correct-course.md`
**Integrates With**: Product Owner Agent, All Agents

**Enhancement**:
- Structured change management using change checklists
- Impact analysis on epics, artifacts, and MVP scope
- Solution exploration with rollback and re-scoping options
- Sprint change proposals with actionable updates

**Implementation**:
- Add as cross-cutting capability for all agents
- Create change-checklist template for structured analysis
- Integrate with all workflows for scope change management

**Change Process**:
```markdown
## Change Management Process
1. Change Trigger: Requirement change, scope evolution, or course correction needed
2. Any Agent: Use correct-course task for structured analysis
3. Process: Work through change-checklist systematically
4. Output: Sprint Change Proposal with specific artifact updates
5. Decision: Implement changes or escalate for fundamental replanning
```

## Integration Implementation Plan

### Phase 1: Core Task Integration
- [ ] Add advanced-elicitation capability to all strategic agents
- [ ] Integrate create-next-story and validate-next-story into SM and PO agents
- [ ] Add document-project capability to System Architect agent
- [ ] Add shard-doc capability to Product Owner agent

### Phase 2: Specialized Capabilities  
- [ ] Integrate brownfield story creation tasks into PM and SM agents
- [ ] Add generate-ai-frontend-prompt to UX Expert agent
- [ ] Implement correct-course as cross-cutting capability

### Phase 3: Workflow Enhancement
- [ ] Update all workflows to reference new task capabilities
- [ ] Create change-checklist and other supporting templates
- [ ] Test integrated workflows with sophisticated task execution

## Template Updates Required

### Agent Template Enhancements
1. **Strategic Agents**: Add advanced elicitation process
2. **Scrum Master**: Replace basic story creation with systematic approach
3. **Product Owner**: Add validation and sharding capabilities  
4. **System Architect**: Add brownfield documentation capability
5. **UX Expert**: Add AI frontend generation capability

### Workflow Template Enhancements
1. **Planning Cycle**: Reference advanced elicitation and document sharding
2. **Brownfield Enhancement**: Use sophisticated story classification system
3. **All Workflows**: Add change management integration points

### New Templates Required
1. **Change Checklist**: For course correction analysis
2. **Story Validation Template**: For comprehensive story review
3. **Brownfield Analysis Template**: For existing system documentation

## Success Metrics

### Enhanced Capabilities
- Interactive elicitation improves document quality and completeness
- Systematic story creation reduces implementation errors
- Validation prevents hallucination and ensures readiness
- Document sharding enables focused development consumption

### Process Improvements
- Brownfield enhancements become safer and more systematic
- AI frontend generation accelerates UI development
- Change management prevents scope creep and ensures alignment
- Course correction maintains project momentum

### Quality Assurance
- Anti-hallucination verification ensures technical accuracy
- Validation gates prevent low-quality handoffs between agents
- Systematic documentation captures actual system state
- Interactive processes ensure stakeholder alignment

## Next Steps

1. **Review Integration Plan**: Validate proposed enhancements align with project goals
2. **Prioritize Implementation**: Determine which tasks provide highest value
3. **Begin Phase 1**: Start with core task integration for immediate benefits
4. **Test and Iterate**: Validate improvements before expanding to specialized capabilities
5. **Full Integration**: Complete implementation with workflow enhancements

---

**Note**: These tasks represent sophisticated capabilities from the original BMAD system. Integration will significantly enhance our framework's intelligence and effectiveness while maintaining Claude Code compatibility.