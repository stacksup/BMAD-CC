#!/usr/bin/env pwsh
# GitHub Automatic Backup Hook for BMAD
# Ensures all completed work is backed up to GitHub

param(
    [string]$Action = "backup",
    [string]$Branch = "main",
    [switch]$Force = $false
)

$ErrorActionPreference = "Stop"

# Configuration
$PROJECT_NAME = "{{PROJECT_NAME}}"

function Get-GitHubUser {
    try {
        # Try GitHub CLI first (most reliable)
        $ghUser = gh api user --jq '.login' 2>$null
        if ($LASTEXITCODE -eq 0 -and $ghUser) {
            return $ghUser
        }
    } catch {}
    
    try {
        # Try git config
        $gitUser = git config --get user.name
        if ($gitUser) {
            return $gitUser
        }
    } catch {}
    
    try {
        # Try to extract from remote URL
        $remoteUrl = git config --get remote.origin.url
        if ($remoteUrl -match 'github\.com[:/]([^/]+)/') {
            return $matches[1]
        }
    } catch {}
    
    return $null
}

function Test-GitHubConnection {
    try {
        # Check if we have a remote
        $remote = git remote -v | Select-String "origin.*github.com"
        if (-not $remote) {
            return @{
                Connected = $false
                Message = "No GitHub remote configured"
            }
        }
        
        # Check if we can reach GitHub
        $canFetch = git ls-remote --heads origin 2>&1
        if ($LASTEXITCODE -ne 0) {
            return @{
                Connected = $false
                Message = "Cannot connect to GitHub (check credentials)"
            }
        }
        
        return @{
            Connected = $true
            Message = "GitHub connection OK"
        }
    } catch {
        return @{
            Connected = $false
            Message = "Git error: $_"
        }
    }
}

function Get-CurrentBranch {
    try {
        $branch = git rev-parse --abbrev-ref HEAD
        return $branch
    } catch {
        return "main"
    }
}

function Ensure-GitHubRemote {
    param([string]$RepoName)
    
    $remoteUrl = git config --get remote.origin.url
    
    if (-not $remoteUrl) {
        Write-Host "‚ö†Ô∏è No GitHub remote configured" -ForegroundColor Yellow
        
        # Try to get GitHub username
        $ghUser = Get-GitHubUser
        if (-not $ghUser) {
            Write-Host "Cannot determine GitHub username. Please set up remote manually:" -ForegroundColor Yellow
            Write-Host "  git remote add origin https://github.com/YOUR_USERNAME/$RepoName.git" -ForegroundColor Cyan
            return $false
        }
        
        # Check if repo exists on GitHub
        Write-Host "Checking if repo exists on GitHub..." -ForegroundColor Cyan
        $repoExists = gh repo view "$ghUser/$RepoName" 2>&1 | Out-Null
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "Repository doesn't exist on GitHub. Creating..." -ForegroundColor Yellow
            
            # Create repo
            gh repo create "$RepoName" --private --source=. --remote=origin
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Created GitHub repository: $ghUser/$RepoName" -ForegroundColor Green
                return $true
            } else {
                Write-Host "Failed to create GitHub repository" -ForegroundColor Red
                return $false
            }
        } else {
            # Repo exists, add remote
            Write-Host "Adding GitHub remote..." -ForegroundColor Cyan
            git remote add origin "https://github.com/$ghUser/$RepoName.git"
            return $true
        }
    }
    
    return $true
}

function Backup-ToGitHub {
    param(
        [string]$CommitMessage = "backup: Auto-backup completed work",
        [switch]$CreatePR = $false
    )
    
    Write-Host "`nüîÑ GitHub Backup Process Starting..." -ForegroundColor Cyan
    
    # Check GitHub connection
    $connection = Test-GitHubConnection
    if (-not $connection.Connected) {
        Write-Warning "GitHub not connected: $($connection.Message)"
        
        # Try to set up remote
        $repoName = Split-Path -Leaf (Get-Location)
        if (-not (Ensure-GitHubRemote -RepoName $repoName)) {
            Write-Error "Cannot establish GitHub connection"
            return $false
        }
    }
    
    # Get current branch
    $currentBranch = Get-CurrentBranch
    Write-Host "Current branch: $currentBranch" -ForegroundColor Gray
    
    # Check for uncommitted changes
    $status = git status --porcelain
    if ($status) {
        Write-Host "üìù Uncommitted changes detected. Committing..." -ForegroundColor Yellow
        
        git add -A
        git commit -m "$CommitMessage [auto-backup]"
        
        if ($LASTEXITCODE -ne 0) {
            Write-Warning "Failed to commit changes"
            return $false
        }
    }
    
    # Pull latest from remote to avoid conflicts
    Write-Host "üì• Pulling latest from GitHub..." -ForegroundColor Cyan
    git pull origin $currentBranch --rebase --autostash 2>&1 | Out-Null
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ö†Ô∏è Pull failed, attempting to push anyway..." -ForegroundColor Yellow
    }
    
    # Push to GitHub
    Write-Host "üì§ Pushing to GitHub..." -ForegroundColor Cyan
    git push origin $currentBranch
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ö†Ô∏è Direct push failed. Trying with upstream..." -ForegroundColor Yellow
        git push --set-upstream origin $currentBranch
        
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to push to GitHub"
            return $false
        }
    }
    
    Write-Host "‚úÖ Successfully backed up to GitHub!" -ForegroundColor Green
    
    # Show GitHub URL
    $remoteUrl = git config --get remote.origin.url
    if ($remoteUrl) {
        $webUrl = $remoteUrl -replace '\.git$', ''
        if ($webUrl -match 'git@github\.com:(.+)') {
            $webUrl = "https://github.com/$($matches[1])"
        }
        Write-Host "üìé View on GitHub: $webUrl" -ForegroundColor Cyan
    }
    
    return $true
}

function Create-PullRequest {
    param(
        [string]$Title,
        [string]$Body = "Automated PR from BMAD workflow"
    )
    
    # Check if gh CLI is available
    if (-not (Get-Command gh -ErrorAction SilentlyContinue)) {
        Write-Warning "GitHub CLI not installed. Cannot create PR automatically."
        Write-Host "Install with: winget install GitHub.cli" -ForegroundColor Yellow
        return $false
    }
    
    # Create PR
    Write-Host "üîÑ Creating Pull Request..." -ForegroundColor Cyan
    
    $prUrl = gh pr create --title "$Title" --body "$Body" --base main 2>&1
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Pull Request created: $prUrl" -ForegroundColor Green
        return $true
    } else {
        Write-Warning "Failed to create PR: $prUrl"
        return $false
    }
}

function Setup-GitHubIntegration {
    Write-Host "`nüîß Setting up GitHub Integration..." -ForegroundColor Cyan
    
    # Check git installation
    if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
        Write-Error "Git is not installed. Please install Git first."
        return $false
    }
    
    # Check if in git repo
    if (-not (Test-Path .git)) {
        Write-Host "Initializing Git repository..." -ForegroundColor Yellow
        git init
        git add .
        git commit -m "Initial commit"
    }
    
    # Configure git user if needed
    $userName = git config --get user.name
    if (-not $userName) {
        Write-Host "Configuring Git user..." -ForegroundColor Yellow
        
        # Try to get from GitHub CLI
        if (Get-Command gh -ErrorAction SilentlyContinue) {
            $ghUser = gh api user --jq '.login' 2>$null
            $ghEmail = gh api user --jq '.email' 2>$null
            
            if ($ghUser) {
                git config user.name $ghUser
                git config user.email ($ghEmail ?? "$ghUser@users.noreply.github.com")
                Write-Host "‚úÖ Configured Git user from GitHub: $ghUser" -ForegroundColor Green
            }
        }
        
        if (-not (git config --get user.name)) {
            Write-Host "Please configure Git user:" -ForegroundColor Yellow
            Write-Host "  git config --global user.name 'Your Name'" -ForegroundColor Cyan
            Write-Host "  git config --global user.email 'your.email@example.com'" -ForegroundColor Cyan
            return $false
        }
    }
    
    # Setup remote
    $repoName = Split-Path -Leaf (Get-Location)
    return Ensure-GitHubRemote -RepoName $repoName
}

# Main execution
switch ($Action) {
    "backup" {
        Backup-ToGitHub
    }
    
    "setup" {
        Setup-GitHubIntegration
    }
    
    "status" {
        $connection = Test-GitHubConnection
        Write-Host "`nüìä GitHub Integration Status" -ForegroundColor Cyan
        Write-Host "=" * 40
        
        if ($connection.Connected) {
            Write-Host "‚úÖ GitHub Connected" -ForegroundColor Green
            
            $remoteUrl = git config --get remote.origin.url
            Write-Host "Remote: $remoteUrl"
            
            $branch = Get-CurrentBranch
            Write-Host "Branch: $branch"
            
            $user = Get-GitHubUser
            if ($user) {
                Write-Host "User: $user"
            }
            
            # Check for unpushed commits
            $unpushed = git log origin/$(Get-CurrentBranch)..HEAD --oneline 2>$null
            if ($unpushed) {
                Write-Host "‚ö†Ô∏è Unpushed commits:" -ForegroundColor Yellow
                $unpushed | ForEach-Object { Write-Host "  $_" }
            } else {
                Write-Host "‚úÖ All commits pushed" -ForegroundColor Green
            }
        } else {
            Write-Host "‚ùå GitHub Not Connected: $($connection.Message)" -ForegroundColor Red
            Write-Host "Run '/bmad:github-setup' to configure" -ForegroundColor Yellow
        }
        Write-Host "=" * 40
    }
    
    "push-all" {
        # Force push all branches
        Write-Host "üì§ Pushing all branches to GitHub..." -ForegroundColor Cyan
        git push --all origin
        git push --tags origin
    }
    
    default {
        Write-Error "Unknown action: $Action"
        Write-Host "Valid actions: backup, setup, status, push-all"
    }
}