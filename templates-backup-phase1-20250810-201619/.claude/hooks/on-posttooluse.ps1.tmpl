#!/usr/bin/env pwsh
# Post-tool-use hook for {{PROJECT_NAME}}
# Runs after Claude Code tool operations

$ErrorActionPreference = "SilentlyContinue"
Set-Location -Path (Get-Location)

# Track if significant changes were made
$significantChanges = $false

# Frontend linting and type checking
if (Test-Path "{{FRONTEND_DIR}}\package.json") {
    Push-Location "{{FRONTEND_DIR}}"
    try { 
        npm run -s lint | Out-Host 
        npm run -s typecheck | Out-Host
    } catch {}
    Pop-Location
}

# Backend checks
if (Test-Path "{{BACKEND_DIR}}") {
    try { 
        python --version | Out-Host 
    } catch {}
}

# Check for uncommitted changes that might need documentation
$gitStatus = git status --porcelain 2>$null
if ($gitStatus) {
    $changedFiles = $gitStatus -split "`n" | ForEach-Object { $_.Substring(3) }
    
    # Check if changes are significant enough to warrant documentation
    $needsDocumentation = $false
    foreach ($file in $changedFiles) {
        if ($file -match "\.(js|ts|py|go|java|cs|rb|php)$") {
            $significantChanges = $true
        }
        if ($file -match "api|routes|endpoints|controllers") {
            $needsDocumentation = $true
            Write-Host "üìù API changes detected - remember to update documentation" -ForegroundColor Yellow
        }
        if ($file -match "package\.json|requirements\.txt|go\.mod|pom\.xml") {
            $needsDocumentation = $true
            Write-Host "üìù Dependency changes detected - update README prerequisites" -ForegroundColor Yellow
        }
        if ($file -match "docker|Dockerfile|compose") {
            $needsDocumentation = $true
            Write-Host "üìù Docker changes detected - update deployment docs" -ForegroundColor Yellow
        }
        if ($file -match "\.env|config|settings") {
            $needsDocumentation = $true
            Write-Host "üìù Configuration changes detected - update config docs" -ForegroundColor Yellow
        }
    }
    
    # Remind about documentation if needed
    if ($needsDocumentation) {
        Write-Host "`nüí° Documentation Reminder:" -ForegroundColor Cyan
        Write-Host "   When task is complete, documentation will be auto-updated" -ForegroundColor Gray
        Write-Host "   The doc-agent will handle CHANGELOG, README, and story notes" -ForegroundColor Gray
    }
}

# Check if we're in a task context
$currentTask = $null
try {
    $currentTask = & {{TASKMASTER_CLI}} current --json 2>$null | ConvertFrom-Json
} catch {}

if ($currentTask -and $significantChanges) {
    Write-Host "`nüìã Current Task: [$($currentTask.id)] $($currentTask.title)" -ForegroundColor Cyan
    Write-Host "   Remember to update task status when complete" -ForegroundColor Gray
}

# Check documentation health periodically
$lastDocCheck = Join-Path $env:TEMP "last-doc-check-{{PROJECT_NAME}}.txt"
$shouldCheckDocs = $true

if (Test-Path $lastDocCheck) {
    $lastCheck = Get-Content $lastDocCheck
    $lastCheckDate = [DateTime]::Parse($lastCheck)
    $hoursSinceCheck = ((Get-Date) - $lastCheckDate).TotalHours
    if ($hoursSinceCheck -lt 24) {
        $shouldCheckDocs = $false
    }
}

if ($shouldCheckDocs) {
    # Run documentation health check
    $docIssues = @()
    
    if (-not (Test-Path "README.md")) {
        $docIssues += "README.md is missing"
    }
    
    if (-not (Test-Path "CHANGELOG.md")) {
        $docIssues += "CHANGELOG.md is missing"
    }
    
    if (Test-Path "CHANGELOG.md") {
        $changelog = Get-Content "CHANGELOG.md" -Raw
        if ($changelog -notmatch "\[Unreleased\]") {
            $docIssues += "CHANGELOG.md missing [Unreleased] section"
        }
    }
    
    if ($docIssues.Count -gt 0) {
        Write-Host "`n‚ö†Ô∏è  Documentation Health Check:" -ForegroundColor Yellow
        $docIssues | ForEach-Object { 
            Write-Host "   - $_" -ForegroundColor Yellow 
        }
        Write-Host "   Run doc-agent to fix these issues" -ForegroundColor Gray
    }
    
    # Update last check time
    (Get-Date).ToString() | Out-File $lastDocCheck
}

exit 0