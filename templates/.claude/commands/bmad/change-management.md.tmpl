---
description: BMAD change management workflow for {{PROJECT_NAME}} ({{PROJECT_TYPE}}) - Systematic handling of scope, requirements, and technical changes.
allowed-tools: Bash(git:*), Read, Grep, Glob, Edit, Write, Task
---

# /bmad:change-management

## COMPREHENSIVE CHANGE MANAGEMENT SYSTEM

Systematic process for handling scope changes, requirement evolution, and technical modifications with full impact assessment and stakeholder approval.

## 0) MANDATORY: EXECUTION AUTHORIZATION VALIDATION

**COMPLIANCE ENFORCEMENT: Validate execution authority before proceeding**
```bash
# CRITICAL: Validate this workflow has execution authorization
TASK_ID=${1:-$({{TASKMASTER_CLI}} current-task-id 2>/dev/null)}
EXECUTION_AUTHORIZED=${2:-false}

if [ "$EXECUTION_AUTHORIZED" != "true" ]; then
    echo "‚ùå COMPLIANCE VIOLATION: Change management requires execution authorization"
    echo "Required: Must be routed from orchestrator with --execution-authorized=true"
    echo ""
    echo "Proper usage: /bmad:change-management --task-id=<id> --execution-authorized=true"
    echo ""
    echo "If this is a direct change management request:"
    echo "1. Create task: {{TASKMASTER_CLI}} create --title='Change: [description]'"
    echo "2. Route through orchestrator for authorization"
    exit 1
fi

# Validate task exists and is properly tracked
if [ -z "$TASK_ID" ]; then
    echo "‚ùå COMPLIANCE VIOLATION: Task ID required for change management workflow"
    echo "Required: All change management work must be tracked in Task Master"
    exit 1
fi

# Verify task status allows execution
TASK_STATUS=$({{TASKMASTER_CLI}} get-status --id=$TASK_ID 2>/dev/null)
if [[ "$TASK_STATUS" != "execution-authorized" && "$TASK_STATUS" != "in-progress" ]]; then
    echo "‚ùå COMPLIANCE VIOLATION: Task $TASK_ID not authorized for execution"
    echo "Current status: $TASK_STATUS"
    echo "Required status: execution-authorized or in-progress"
    exit 1
fi

# Set task status to in-progress
{{TASKMASTER_CLI}} set-status --id=$TASK_ID --status=in-progress

echo "‚úÖ Execution authorization validated for change management"
echo "üìã Task ID: $TASK_ID"
echo "üîß Change management workflow authorized to proceed"
```

**Task Master Integration (MANDATORY):**
```bash
# Initialize or update task tracking
if [ -n "$TASK_ID" ]; then
    # Update existing task
    {{TASKMASTER_CLI}} update-task --id=$TASK_ID --prompt="Change management started - execution authorized"
else
    # Create new change management task if none provided
    TASK_ID=$({{TASKMASTER_CLI}} create --title="Change: [Auto-generated]" --type="change" --status="in-progress")
    echo "üìù Created change management task: $TASK_ID"
fi

# Set change management specific metadata
{{TASKMASTER_CLI}} set-field --id=$TASK_ID --field="workflow" --value="change-management"
{{TASKMASTER_CLI}} set-field --id=$TASK_ID --field="execution-start" --value="$(date -Iseconds)"
```

## PHASE 1: CHANGE REQUEST INITIATION

### 1A) Automatic Change Detection
**Trigger Change Detection:**
```bash
# Check for pending changes
./.claude/hooks/change-detector.sh -EventType "check-pending-changes"

# Detect changes in key documents
if [ -f "docs/PRD.md" ]; then
    ./.claude/hooks/change-detector.sh -EventType "prd-updated"
fi

if [ -f "docs/architecture.md" ]; then
    ./.claude/hooks/change-detector.sh -EventType "architecture-updated"  
fi
```

### 1B) Manual Change Request Creation
**For explicitly requested changes:**
```bash
# Create manual change request
./.claude/hooks/change-detector.sh -EventType "manual-change-request" -Context @{
    Description="User requested change: $USER_CHANGE_DESCRIPTION"
    Priority="High"
    ChangeType="Requirements"
}
```

## PHASE 1: CHANGE IMPACT ASSESSMENT

### 1A) Load Product Owner for Change Analysis
**Load Product Owner Agent:**
```
Load the po-agent to perform comprehensive change impact assessment using the change management capability.
```

**Change Analysis Process:**
1. **Load Change Request**: Read the pending change from docs/changes/
2. **Impact Assessment Matrix**: Analyze across 7 dimensions
3. **Implementation Options**: Generate 3 strategic options
4. **Risk Assessment**: Identify and categorize risks
5. **Sprint Impact Analysis**: Assess effect on current/planned sprints
6. **Stakeholder Communication Plan**: Define notification strategy

### 1B) Automated Validation Gate
**Quality Gate - Change Impact Validation:**
```bash
# Enforce change impact validation
./.claude/hooks/validation-enforcer.sh -EventType "change-request"

# Validates:
# - Change impact assessment completeness (score ‚â•7/10)
# - Risk assessment quality
# - Implementation options analysis
# - Stakeholder communication plan
# - Sprint impact documentation
echo "‚úÖ Change impact validation completed"
```

## PHASE 2: STAKEHOLDER APPROVAL PROCESS

### 2A) Approval Workflow Based on Impact Level

**Low Impact Changes (<4 hours):**
```bash
# Product Owner approval sufficient
echo "üìã Low impact change - Product Owner approval only"
# Auto-approve if score ‚â•8/10
```

**Medium Impact Changes (4-40 hours):**
```bash
# Require Product Owner + Technical Lead approval
echo "‚ö†Ô∏è Medium impact change - Multiple approvals required"
echo "Notify Technical Lead for architecture review"
```

**High Impact Changes (>40 hours):**
```bash  
# Full stakeholder approval required
echo "üö® High impact change - Full stakeholder review required"
echo "Schedule change review meeting with all stakeholders"
echo "Consider impact on roadmap and release plans"
```

### 2B) Decision Recording
**Document Approval Decision:**
```bash
# Update change request with decision
CHANGE_ID=$(cat .bmad-change-pending 2>/dev/null || echo "none")
if [ "$CHANGE_ID" != "none" ]; then
    echo "üìù Recording change decision for: $CHANGE_ID"
    # Product Owner updates change request with decision
fi
```

## PHASE 3: CHANGE IMPLEMENTATION

### 3A) Approved Change Implementation
**For approved changes:**
```bash
# Implement approved change
case "$CHANGE_DECISION" in
    "APPROVED")
        echo "‚úÖ Change approved - proceeding with implementation"
        
        # Update sprint backlog if needed
        {{TASKMASTER_CLI}} update-sprint --change-id="$CHANGE_ID"
        
        # Route to appropriate development workflow
        if [ "$IMPLEMENTATION_OPTION" = "phased" ]; then
            /bmad:story-cycle  # Implement in phases
        else
            /bmad:saas-cycle   # Full implementation
        fi
        ;;
        
    "CONDITIONAL")
        echo "‚ö†Ô∏è Change conditionally approved"
        echo "Implement with specified conditions and monitoring"
        ;;
        
    "DEFERRED")
        echo "‚è∏Ô∏è Change deferred to future sprint/release"
        # Archive change request to deferred folder
        ;;
        
    "REJECTED")
        echo "‚ùå Change rejected - documenting rationale"
        # Archive change request to rejected folder
        ;;
esac
```

### 3B) Change Monitoring During Implementation
**Monitor change impact during implementation:**
```bash
# Monitor implementation progress
echo "üìä Monitoring change implementation..."

# Check if implementation is exceeding estimates
ACTUAL_TIME=$(git log --since="$CHANGE_START_DATE" --pretty=format:"%h" | wc -l)
if [ $ACTUAL_TIME -gt $((ESTIMATED_TIME * 150 / 100)) ]; then
    echo "‚ö†Ô∏è Implementation exceeding estimates by >50%"
    echo "Consider rollback triggers"
fi

# Monitor for new issues or scope creep
./.claude/hooks/change-detector.sh -EventType "file-modified" -FilePath "docs/stories/"
```

## PHASE 4: ROLLBACK & CONTINGENCY

### 4A) Rollback Triggers
**Automatic rollback conditions:**
```bash
# Check rollback triggers
if [ $IMPLEMENTATION_TIME_RATIO -gt 1.5 ]; then
    echo "üîÑ ROLLBACK TRIGGER: Implementation time >150% of estimate"
    TRIGGER_ROLLBACK=true
fi

if [ $CRITICAL_ISSUES -gt 0 ]; then
    echo "üîÑ ROLLBACK TRIGGER: Critical issues discovered"
    TRIGGER_ROLLBACK=true
fi

if [ "$STAKEHOLDER_APPROVAL_WITHDRAWN" = "true" ]; then
    echo "üîÑ ROLLBACK TRIGGER: Stakeholder approval withdrawn"
    TRIGGER_ROLLBACK=true
fi
```

### 4B) Rollback Execution
**Execute rollback plan:**
```bash
if [ "$TRIGGER_ROLLBACK" = "true" ]; then
    echo "üîÑ Executing rollback plan..."
    
    # Stop current implementation
    git checkout main
    git reset --hard HEAD~$CHANGE_COMMITS
    
    # Restore previous sprint plan
    {{TASKMASTER_CLI}} restore-sprint --before-change="$CHANGE_ID"
    
    # Notify stakeholders
    echo "üìß Notifying stakeholders of rollback"
    
    # Document lessons learned
    echo "üìù Documenting rollback lessons"
    
    echo "‚úÖ Rollback complete. Recovery timeline: 1-2 days"
fi
```

## PHASE 5: CHANGE COMPLETION & LEARNING

### 5A) Change Completion Validation
**Quality Gate - Change Implementation Complete:**
```bash
# Validate change implementation
./.claude/hooks/validation-enforcer.sh -EventType "change-implementation-complete" -Context @{ChangeId=$CHANGE_ID}

# Validates:
# - All change objectives met
# - No unintended side effects
# - Documentation updated
# - Success criteria achieved
echo "‚úÖ Change implementation validation passed"
```

### 5B) Archive and Learn
**Archive change and extract learnings:**
```bash
# Archive approved change
./.claude/hooks/change-detector.sh -EventType "approve-change"

# Extract lessons learned
Load the learnings-agent to extract insights from change process:
- What went well in change management
- What could be improved
- Process refinements for future changes
- Update change management templates with learnings

# Update change management metrics
echo "üìä Updating change management metrics..."
echo "- Change implementation accuracy: $ACCURACY"
echo "- Stakeholder satisfaction: $SATISFACTION"  
echo "- Process efficiency: $EFFICIENCY"
```

## SPECIALIZED CHANGE TYPES

### Technical Architecture Changes
```bash
# Route to System Architect for technical impact
Load architect-agent for:
- Breaking change analysis
- Backward compatibility assessment
- Migration strategy development
- Performance impact evaluation
```

### Business Requirements Changes
```bash
# Route to Business Analyst for business impact
Load analyst-agent for:
- Market impact assessment
- Competitive advantage analysis
- User impact evaluation
- Business case validation
```

### UX/UI Design Changes
```bash
# Route to UX Expert for design impact
Load ux-agent for:
- User experience impact analysis
- Design consistency evaluation
- Accessibility impact assessment
- AI tool integration for rapid prototyping
```

## CHANGE MANAGEMENT COMMANDS

### Quick Commands
- `/.claude/hooks/change-detector.sh -EventType "check-pending-changes"` - Check pending changes
- `/.claude/hooks/change-detector.sh -EventType "manual-change-request"` - Create manual change request  
- `/bmad:change-management` - Full change management workflow
- `/.claude/hooks/validation-enforcer.sh -EventType "change-request"` - Validate change impact

### Environment Variables
- `BMAD_CHANGE_MANAGEMENT=1` - Enables change management features
- `BMAD_CHANGE_MIN_SCORE=7` - Minimum change validation score
- `BMAD_DISABLE_GATES=1` - Temporarily disable change gates

## SUCCESS METRICS

**Change Management Quality:**
- Change impact prediction accuracy
- Stakeholder approval process efficiency
- Implementation timeline accuracy
- Rollback frequency and recovery time

**Process Efficiency:**
- Time from change request to decision
- Change implementation cycle time
- Stakeholder satisfaction with process
- Reduced unplanned work and scope creep

**Business Outcomes:**
- Improved project predictability
- Reduced change-related risks
- Better stakeholder alignment
- Faster response to market changes

Remember: Effective change management turns scope creep from a threat into a competitive advantage by systematically evaluating and implementing valuable changes while maintaining project integrity and stakeholder trust.