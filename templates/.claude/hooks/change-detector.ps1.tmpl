#!/usr/bin/env pwsh
# BMAD Change Detection Hook for {{PROJECT_NAME}}
# Automatically detects and triggers change management processes

param(
    [string]$EventType,
    [string]$FilePath,
    [hashtable]$Context = @{}
)

$ErrorActionPreference = "Stop"

# Configuration
$PROJECT_NAME = "{{PROJECT_NAME}}"
$CHANGES_DIR = "docs/changes"
$VALIDATION_DIR = "docs/validation"

# Ensure directories exist
@($CHANGES_DIR, $VALIDATION_DIR) | ForEach-Object {
    if (-not (Test-Path $_)) {
        New-Item -ItemType Directory -Force -Path $_ | Out-Null
    }
}

function Detect-ScopeChange {
    param([string]$FilePath, [string]$Content)
    
    $indicators = @(
        "TODO|FIXME|HACK",
        "new requirement",
        "change request",
        "scope change",
        "additional feature",
        "modify existing"
    )
    
    foreach ($indicator in $indicators) {
        if ($Content -match $indicator) {
            return $true
        }
    }
    
    return $false
}

function Detect-ArchitectureChange {
    param([string]$FilePath, [string]$Content)
    
    $indicators = @(
        "new technology",
        "database change",
        "API change",
        "integration change",
        "architecture update",
        "breaking change"
    )
    
    foreach ($indicator in $indicators) {
        if ($Content -match $indicator) {
            return $true
        }
    }
    
    return $false
}

function Create-ChangeRequest {
    param(
        [string]$ChangeType,
        [string]$Description,
        [string]$SourceFile,
        [string]$Priority = "Medium"
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd-HHmm"
    $changeId = "CR-$PROJECT_NAME-$timestamp"
    $changeFile = "$CHANGES_DIR/$changeId.md"
    
    # Load change management template
    $templatePath = "docs/templates/change-management-template.md.tmpl"
    if (Test-Path $templatePath) {
        $template = Get-Content $templatePath -Raw
        
        # Replace tokens
        $changeRequest = $template -replace "{{PROJECT_NAME}}", $PROJECT_NAME `
                                  -replace "{{TIMESTAMP}}", $timestamp `
                                  -replace "{{CHANGE_TYPE}}", $ChangeType `
                                  -replace "{{PRIORITY}}", $Priority `
                                  -replace "{{DATE}}", (Get-Date -Format "yyyy-MM-dd") `
                                  -replace "{{CURRENT_STATE_DESCRIPTION}}", "Auto-detected change in $SourceFile" `
                                  -replace "{{DESIRED_STATE_DESCRIPTION}}", $Description `
                                  -replace "{{DETAILED_CHANGE_DESCRIPTION}}", "Change detected during file analysis: $Description"
        
        Set-Content -Path $changeFile -Value $changeRequest -Encoding UTF8
        
        # Create change marker
        Set-Content -Path ".bmad-change-pending" -Value $changeId -Encoding UTF8
        
        Write-Host "üîÑ Change request created: $changeId" -ForegroundColor Yellow
        Write-Host "üìù Review at: $changeFile" -ForegroundColor Gray
        
        return $changeId
    } else {
        Write-Warning "Change management template not found: $templatePath"
        return $null
    }
}

function Trigger-ChangeValidation {
    param([string]$ChangeId)
    
    # Trigger Product Owner validation
    Write-Host "üîç Triggering change impact validation..." -ForegroundColor Blue
    
    try {
        & ./.claude/hooks/validation-enforcer.ps1 -EventType "change-request" -Context @{ChangeId=$ChangeId}
        Write-Host "‚úÖ Change validation triggered successfully" -ForegroundColor Green
    } catch {
        Write-Warning "‚ö†Ô∏è Change validation failed: $_"
    }
}

# Main detection logic
switch ($EventType) {
    "file-modified" {
        if ($FilePath -and (Test-Path $FilePath)) {
            $content = Get-Content $FilePath -Raw
            $changeDetected = $false
            $changeType = "Unknown"
            $description = ""
            
            # Detect scope changes
            if (Detect-ScopeChange -FilePath $FilePath -Content $content) {
                $changeDetected = $true
                $changeType = "Scope"
                $description = "Potential scope change detected in $FilePath"
                Write-Host "üìä Scope change detected in: $FilePath" -ForegroundColor Yellow
            }
            
            # Detect architecture changes
            if (Detect-ArchitectureChange -FilePath $FilePath -Content $content) {
                $changeDetected = $true
                $changeType = "Architecture"
                $description = "Architecture change detected in $FilePath"
                Write-Host "üèóÔ∏è Architecture change detected in: $FilePath" -ForegroundColor Yellow
            }
            
            # Create change request if change detected
            if ($changeDetected) {
                $changeId = Create-ChangeRequest -ChangeType $changeType -Description $description -SourceFile $FilePath
                if ($changeId) {
                    Trigger-ChangeValidation -ChangeId $changeId
                }
            }
        }
    }
    
    "prd-updated" {
        Write-Host "üìã PRD update detected - checking for scope changes..." -ForegroundColor Blue
        
        if (Test-Path "docs/PRD.md") {
            $prdContent = Get-Content "docs/PRD.md" -Raw
            $changeId = Create-ChangeRequest -ChangeType "Requirements" -Description "PRD updated with potential scope changes" -SourceFile "docs/PRD.md" -Priority "High"
            
            if ($changeId) {
                Trigger-ChangeValidation -ChangeId $changeId
            }
        }
    }
    
    "architecture-updated" {
        Write-Host "üèóÔ∏è Architecture update detected - checking for breaking changes..." -ForegroundColor Blue
        
        if (Test-Path "docs/architecture.md") {
            $archContent = Get-Content "docs/architecture.md" -Raw
            $changeId = Create-ChangeRequest -ChangeType "Technical" -Description "Architecture document updated with potential breaking changes" -SourceFile "docs/architecture.md" -Priority "High"
            
            if ($changeId) {
                Trigger-ChangeValidation -ChangeId $changeId
            }
        }
    }
    
    "manual-change-request" {
        # Allow manual change request creation
        $description = if ($Context.Description) { $Context.Description } else { "Manual change request" }
        $priority = if ($Context.Priority) { $Context.Priority } else { "Medium" }
        $changeType = if ($Context.ChangeType) { $Context.ChangeType } else { "Manual" }
        
        Write-Host "üìù Manual change request initiated..." -ForegroundColor Blue
        $changeId = Create-ChangeRequest -ChangeType $changeType -Description $description -SourceFile "Manual Request" -Priority $priority
        
        if ($changeId) {
            Trigger-ChangeValidation -ChangeId $changeId
        }
    }
    
    "check-pending-changes" {
        # Check for pending changes
        if (Test-Path ".bmad-change-pending") {
            $pendingChangeId = Get-Content ".bmad-change-pending" -Raw
            Write-Host "‚ö†Ô∏è Pending change request: $pendingChangeId" -ForegroundColor Yellow
            Write-Host "Review at: docs/changes/$pendingChangeId.md" -ForegroundColor Gray
            
            # Check if validation exists
            $validationFile = Get-ChildItem -Path "$VALIDATION_DIR/change-impact-*$pendingChangeId*.md" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($validationFile) {
                Write-Host "üìã Change validation exists: $($validationFile.Name)" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Change validation missing - run change impact assessment" -ForegroundColor Red
            }
        } else {
            Write-Host "‚úÖ No pending changes detected" -ForegroundColor Green
        }
    }
    
    "approve-change" {
        # Approve pending change
        if (Test-Path ".bmad-change-pending") {
            $pendingChangeId = Get-Content ".bmad-change-pending" -Raw
            Remove-Item ".bmad-change-pending" -ErrorAction SilentlyContinue
            
            # Archive change request
            $archiveDir = "$CHANGES_DIR/approved"
            if (-not (Test-Path $archiveDir)) {
                New-Item -ItemType Directory -Force -Path $archiveDir | Out-Null
            }
            
            $changeFile = "$CHANGES_DIR/$pendingChangeId.md"
            if (Test-Path $changeFile) {
                Move-Item $changeFile "$archiveDir/$pendingChangeId.md"
                Write-Host "‚úÖ Change $pendingChangeId approved and archived" -ForegroundColor Green
            }
        } else {
            Write-Host "‚ÑπÔ∏è No pending changes to approve" -ForegroundColor Gray
        }
    }
    
    default {
        Write-Verbose "No change detection logic for event: $EventType"
    }
}

# Always check for configuration changes that might affect validation
$configFiles = @("CLAUDE.md", ".claude/settings.local.json", "docker-compose.yml")
foreach ($configFile in $configFiles) {
    if ($FilePath -eq $configFile -and (Test-Path $configFile)) {
        Write-Host "‚öôÔ∏è Configuration change detected in: $configFile" -ForegroundColor Blue
        Write-Host "Consider reviewing validation settings and requirements." -ForegroundColor Gray
    }
}