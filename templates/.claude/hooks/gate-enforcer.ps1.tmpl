$ErrorActionPreference = "Stop"
if ($env:BMAD_DISABLE_GATES -eq "1") { Write-Output "Gates disabled."; exit 0 }

function Get-ChangedFiles {
  if (-not (git rev-parse --is-inside-work-tree 2>$null)) { return @() }
  $out = git diff --name-only
  if ($LASTEXITCODE -ne 0) { return @() }
  return $out -split "`n" | Where-Object { $_ -ne "" }
}

# TESTS + LINT
if ("{{PROJECT_TYPE}}" -eq "saas") {
  if (Test-Path "{{BACKEND_DIR}}") {
    Push-Location "{{BACKEND_DIR}}"
    python -m pytest -q
    if ($LASTEXITCODE -ne 0) { Write-Output "Backend tests failed"; exit 2 }
    Pop-Location
  }
  if (Test-Path "{{FRONTEND_DIR}}\package.json") {
    Push-Location "{{FRONTEND_DIR}}"
    npm run lint;      if ($LASTEXITCODE -ne 0) { Write-Output "Frontend lint failed"; exit 2 }
    npm run typecheck; if ($LASTEXITCODE -ne 0) { Write-Output "Frontend typecheck failed"; exit 2 }
    Pop-Location
  }
} else {
  if (Test-Path "package.json") {
    npm test
    if ($LASTEXITCODE -ne 0) { Write-Output "Tests failed"; exit 2 }
  }
}

# DOCS + LESSONS gates
$changed = Get-ChangedFiles
$codeChanged = $false
foreach ($f in $changed) {
  if ($f -match '^(backend|frontend|src|apps|packages)/') { $codeChanged = $true; break }
}

if ($codeChanged) {
  $hasDocs = $false
  foreach ($f in $changed) {
    if ($f -match '(^|/)CHANGELOG\.md' -or $f -match '^docs/story-notes/') { $hasDocs = $true; break }
  }
  if (-not $hasDocs) { Write-Output "Docs Gate failed."; exit 2 }

  $hasLesson = $false
  foreach ($f in $changed) {
    if ($f -match '^docs/lessons/') { $hasLesson = $true; break }
  }
  if (-not $hasLesson) { Write-Output "Learning Gate failed."; exit 2 }
}
exit 0