#!/usr/bin/env bash
# GitHub Backup and Remote Management for {{PROJECT_NAME}}
# Automated backup management for BMAD Framework projects

set -e

# Parameters
ACTION="${1:-status}"
BRANCH="${2:-$(git branch --show-current 2>/dev/null || echo 'main')}"
FORCE="${3:-false}"

# Configuration
PROJECT_NAME="{{PROJECT_NAME}}"
PROJECT_TYPE="{{PROJECT_TYPE}}"
GITHUB_ORG="${GITHUB_ORG:-{{GITHUB_ORG}}}"
BACKUP_ENABLED="${BMAD_BACKUP_ENABLED:-1}"

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
GRAY='\033[0;90m'
NC='\033[0m'

# Check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo -e "${RED}Not in a git repository${NC}" >&2
        return 1
    fi
    return 0
}

# Check if GitHub CLI is available
check_gh_cli() {
    if ! command -v gh &> /dev/null; then
        echo -e "${YELLOW}⚠️ GitHub CLI not found${NC}"
        echo -e "${GRAY}Install with: brew install gh${NC}"
        return 1
    fi
    return 0
}

# Check authentication status
check_gh_auth() {
    if ! gh auth status >/dev/null 2>&1; then
        echo -e "${YELLOW}⚠️ GitHub CLI not authenticated${NC}"
        echo -e "${GRAY}Run: gh auth login${NC}"
        return 1
    fi
    return 0
}

# Get repository information
get_repo_info() {
    local remote_url
    remote_url=$(git remote get-url origin 2>/dev/null || echo "")
    
    if [ -z "$remote_url" ]; then
        echo '{"status": "no-remote", "message": "No origin remote found"}'
        return 1
    fi
    
    # Extract owner and repo from URL
    local owner_repo
    if echo "$remote_url" | grep -q "github.com"; then
        owner_repo=$(echo "$remote_url" | sed -E 's|.*github\.com[:/]([^/]+/[^/]+)\.git.*|\1|' | sed 's|\.git$||')
        echo '{"status": "github", "owner_repo": "'"$owner_repo"'", "url": "'"$remote_url"'"}'
        return 0
    else
        echo '{"status": "not-github", "message": "Remote is not GitHub"}'
        return 1
    fi
}

# Check if remote repository exists
check_remote_exists() {
    local repo_info
    if ! repo_info=$(get_repo_info); then
        return 1
    fi
    
    local owner_repo
    owner_repo=$(echo "$repo_info" | grep -o '"owner_repo": "[^"]*"' | sed 's/"owner_repo": "\(.*\)"/\1/')
    
    if [ -z "$owner_repo" ]; then
        return 1
    fi
    
    # Check if repository exists on GitHub
    if gh repo view "$owner_repo" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Create GitHub repository
create_github_repo() {
    echo -e "${CYAN}🔧 Creating GitHub repository...${NC}"
    
    local repo_name="$PROJECT_NAME"
    local description="BMAD Framework project: $PROJECT_NAME"
    local visibility="private"
    
    # Create repository
    if [ -n "$GITHUB_ORG" ] && [ "$GITHUB_ORG" != "" ]; then
        gh repo create "$GITHUB_ORG/$repo_name" --description "$description" --"$visibility"
    else
        gh repo create "$repo_name" --description "$description" --"$visibility"
    fi
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ Repository created successfully${NC}"
        
        # Add remote if not exists
        if ! git remote get-url origin >/dev/null 2>&1; then
            if [ -n "$GITHUB_ORG" ] && [ "$GITHUB_ORG" != "" ]; then
                git remote add origin "https://github.com/$GITHUB_ORG/$repo_name.git"
            else
                local username
                username=$(gh api user --jq .login)
                git remote add origin "https://github.com/$username/$repo_name.git"
            fi
            echo -e "${GREEN}✅ Remote origin added${NC}"
        fi
        
        return 0
    else
        echo -e "${RED}❌ Failed to create repository${NC}"
        return 1
    fi
}

# Push to remote repository
push_to_remote() {
    local branch="$1"
    local force="$2"
    
    echo -e "${CYAN}📤 Pushing to remote repository...${NC}"
    
    # Check if we have commits to push
    if ! git log --oneline -1 >/dev/null 2>&1; then
        echo -e "${YELLOW}⚠️ No commits to push${NC}"
        return 0
    fi
    
    # Check for uncommitted changes
    if [ -n "$(git status --porcelain)" ]; then
        echo -e "${YELLOW}⚠️ Uncommitted changes detected${NC}"
        echo -e "${GRAY}Commit changes before backup${NC}"
        return 1
    fi
    
    # Push to remote
    local push_cmd="git push"
    if [ "$force" = "true" ]; then
        push_cmd="git push --force-with-lease"
    fi
    
    # Set upstream if first push
    if ! git rev-parse --verify "origin/$branch" >/dev/null 2>&1; then
        push_cmd="git push -u origin $branch"
    fi
    
    if $push_cmd; then
        echo -e "${GREEN}✅ Successfully pushed to remote${NC}"
        return 0
    else
        echo -e "${RED}❌ Failed to push to remote${NC}"
        return 1
    fi
}

# Sync with remote repository
sync_with_remote() {
    echo -e "${CYAN}🔄 Syncing with remote repository...${NC}"
    
    # Fetch latest changes
    git fetch origin
    
    # Check if we're behind
    local behind_count
    behind_count=$(git rev-list --count HEAD..origin/"$BRANCH" 2>/dev/null || echo "0")
    
    if [ "$behind_count" -gt 0 ]; then
        echo -e "${YELLOW}⚠️ Local branch is $behind_count commits behind remote${NC}"
        echo -e "${GRAY}Consider pulling latest changes${NC}"
    fi
    
    # Check if we're ahead
    local ahead_count
    ahead_count=$(git rev-list --count origin/"$BRANCH"..HEAD 2>/dev/null || echo "0")
    
    if [ "$ahead_count" -gt 0 ]; then
        echo -e "${CYAN}📊 Local branch is $ahead_count commits ahead of remote${NC}"
        push_to_remote "$BRANCH" "false"
    fi
}

# Main execution
case "$ACTION" in
    status)
        echo -e "\n${CYAN}📊 GitHub Backup Status for $PROJECT_NAME${NC}"
        echo "===================================================="
        
        if [ "$BACKUP_ENABLED" != "1" ]; then
            echo -e "${YELLOW}⚠️ Backup disabled (BMAD_BACKUP_ENABLED=0)${NC}"
            exit 0
        fi
        
        if ! check_git_repo; then
            exit 1
        fi
        
        if ! check_gh_cli; then
            echo -e "${GRAY}Backup functionality requires GitHub CLI${NC}"
            exit 0
        fi
        
        if ! check_gh_auth; then
            echo -e "${GRAY}Please authenticate with GitHub CLI${NC}"
            exit 0
        fi
        
        local repo_info
        if repo_info=$(get_repo_info); then
            local owner_repo
            owner_repo=$(echo "$repo_info" | grep -o '"owner_repo": "[^"]*"' | sed 's/"owner_repo": "\(.*\)"/\1/')
            
            if check_remote_exists; then
                echo -e "${GREEN}✅ Connected to GitHub: $owner_repo${NC}"
                
                # Check sync status
                local ahead_count behind_count
                ahead_count=$(git rev-list --count origin/"$BRANCH"..HEAD 2>/dev/null || echo "0")
                behind_count=$(git rev-list --count HEAD..origin/"$BRANCH" 2>/dev/null || echo "0")
                
                if [ "$ahead_count" -gt 0 ] || [ "$behind_count" -gt 0 ]; then
                    echo -e "${YELLOW}⚠️ Out of sync: $ahead_count ahead, $behind_count behind${NC}"
                else
                    echo -e "${GREEN}✅ In sync with remote${NC}"
                fi
            else
                echo -e "${YELLOW}⚠️ Repository exists locally but not on GitHub${NC}"
            fi
        else
            echo -e "${YELLOW}⚠️ No GitHub remote configured${NC}"
            echo -e "${CYAN}Use: /bmad:github setup${NC}"
        fi
        
        echo "===================================================="
        ;;
    
    setup)
        echo -e "${CYAN}🔧 Setting up GitHub backup...${NC}"
        
        if ! check_git_repo; then
            exit 1
        fi
        
        if ! check_gh_cli || ! check_gh_auth; then
            exit 1
        fi
        
        if ! check_remote_exists; then
            create_github_repo
        else
            echo -e "${GREEN}✅ Repository already exists on GitHub${NC}"
        fi
        
        # Initial push
        push_to_remote "$BRANCH" "false"
        ;;
    
    backup|push)
        if [ "$BACKUP_ENABLED" != "1" ]; then
            echo -e "${GRAY}Backup disabled${NC}"
            exit 0
        fi
        
        if ! check_git_repo || ! check_gh_cli || ! check_gh_auth; then
            exit 1
        fi
        
        if ! check_remote_exists; then
            echo -e "${YELLOW}⚠️ GitHub repository not found${NC}"
            echo -e "${CYAN}Run: /bmad:github setup${NC}"
            exit 1
        fi
        
        push_to_remote "$BRANCH" "$FORCE"
        ;;
    
    sync)
        if ! check_git_repo || ! check_gh_cli || ! check_gh_auth; then
            exit 1
        fi
        
        if ! check_remote_exists; then
            echo -e "${YELLOW}⚠️ GitHub repository not found${NC}"
            exit 1
        fi
        
        sync_with_remote
        ;;
    
    *)
        echo -e "${RED}Unknown action: $ACTION${NC}" >&2
        echo "Valid actions: status, setup, backup, push, sync"
        exit 1
        ;;
esac