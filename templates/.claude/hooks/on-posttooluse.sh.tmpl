#!/usr/bin/env bash
# Post-tool-use hook for {{PROJECT_NAME}}
# Runs after Claude Code tool operations

set +e  # Don't exit on errors in this hook

# Track if significant changes were made
significant_changes=false

# Color codes
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
GRAY='\033[0;90m'
NC='\033[0m'

# Frontend linting and type checking
if [ -f "{{FRONTEND_DIR}}/package.json" ]; then
    cd {{FRONTEND_DIR}}
    npm run -s lint 2>/dev/null || true
    npm run -s typecheck 2>/dev/null || true
    cd ..
fi

# Backend checks
if [ -d "{{BACKEND_DIR}}" ]; then
    python --version 2>/dev/null || true
fi

# Check for uncommitted changes that might need documentation
git_status=$(git status --porcelain 2>/dev/null)
if [ -n "$git_status" ]; then
    # Check if changes are significant enough to warrant documentation
    needs_documentation=false
    
    while IFS= read -r line; do
        # Extract filename (skip first 3 characters which are git status codes)
        file="${line:3}"
        
        # Check for significant code changes
        if echo "$file" | grep -qE '\.(js|ts|py|go|java|cs|rb|php)$'; then
            significant_changes=true
        fi
        
        # Check for API changes
        if echo "$file" | grep -qE 'api|routes|endpoints|controllers'; then
            needs_documentation=true
            echo -e "${YELLOW}📋 API changes detected - remember to update documentation${NC}"
        fi
        
        # Check for dependency changes
        if echo "$file" | grep -qE 'package\.json|requirements\.txt|go\.mod|pom\.xml'; then
            needs_documentation=true
            echo -e "${YELLOW}📋 Dependency changes detected - update README prerequisites${NC}"
        fi
        
        # Check for Docker changes
        if echo "$file" | grep -qE 'docker|Dockerfile|compose'; then
            needs_documentation=true
            echo -e "${YELLOW}📋 Docker changes detected - update deployment docs${NC}"
        fi
        
        # Check for configuration changes
        if echo "$file" | grep -qE '\.env|config|settings'; then
            needs_documentation=true
            echo -e "${YELLOW}📋 Configuration changes detected - update config docs${NC}"
        fi
    done <<< "$git_status"
    
    # Remind about documentation if needed
    if [ "$needs_documentation" = true ]; then
        echo -e "\n${CYAN}💡 Documentation Reminder:${NC}"
        echo -e "${GRAY}   When task is complete, documentation will be auto-updated${NC}"
        echo -e "${GRAY}   The doc-agent will handle CHANGELOG, README, and story notes${NC}"
    fi
fi

# Check if we're in a task context
current_task=""
if command -v {{TASKMASTER_CLI}} &> /dev/null; then
    current_task=$({{TASKMASTER_CLI}} current --json 2>/dev/null || true)
elif command -v npx &> /dev/null; then
    current_task=$(npx {{TASKMASTER_CLI}} current --json 2>/dev/null || true)
fi

if [ -n "$current_task" ] && [ "$current_task" != "No current task" ] && [ "$significant_changes" = true ]; then
    # Try to extract task info from JSON (basic parsing)
    task_id=$(echo "$current_task" | grep -o '"id"[[:space:]]*:[[:space:]]*[^,}]*' | head -1 | sed 's/.*: *\([^,}]*\).*/\1/' | tr -d '"')
    task_title=$(echo "$current_task" | grep -o '"title"[[:space:]]*:[[:space:]]*"[^"]*"' | head -1 | sed 's/.*: *"\(.*\)"/\1/')
    
    if [ -n "$task_id" ] && [ -n "$task_title" ]; then
        echo -e "\n${CYAN}📋 Current Task: [$task_id] $task_title${NC}"
        echo -e "${GRAY}   Remember to update task status when complete${NC}"
    fi
fi

# Check documentation health periodically
last_doc_check="/tmp/last-doc-check-{{PROJECT_NAME}}.txt"
should_check_docs=true

if [ -f "$last_doc_check" ]; then
    last_check=$(cat "$last_doc_check")
    last_check_timestamp=$(date -d "$last_check" +%s 2>/dev/null || date -j -f "%a %b %d %T %Z %Y" "$last_check" +%s 2>/dev/null || echo 0)
    current_timestamp=$(date +%s)
    hours_since_check=$(( (current_timestamp - last_check_timestamp) / 3600 ))
    
    if [ $hours_since_check -lt 24 ]; then
        should_check_docs=false
    fi
fi

if [ "$should_check_docs" = true ]; then
    # Run documentation health check
    doc_issues=()
    
    if [ ! -f "README.md" ]; then
        doc_issues+=("README.md is missing")
    fi
    
    if [ ! -f "CHANGELOG.md" ]; then
        doc_issues+=("CHANGELOG.md is missing")
    fi
    
    if [ -f "CHANGELOG.md" ]; then
        if ! grep -q "\[Unreleased\]" "CHANGELOG.md"; then
            doc_issues+=("CHANGELOG.md missing [Unreleased] section")
        fi
    fi
    
    if [ ${#doc_issues[@]} -gt 0 ]; then
        echo -e "\n${YELLOW}⚠️  Documentation Health Check:${NC}"
        for issue in "${doc_issues[@]}"; do
            echo -e "${YELLOW}   - $issue${NC}"
        done
        echo -e "${GRAY}   Run doc-agent to fix these issues${NC}"
    fi
    
    # Update last check time
    date > "$last_doc_check"
fi

exit 0