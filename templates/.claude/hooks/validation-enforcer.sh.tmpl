#!/usr/bin/env bash
# Enhanced BMAD Validation Enforcement Hook for {{PROJECT_NAME}}
# Comprehensive quality gates and validation automation

set -e

# Parameters
EVENT_TYPE="${1:-}"
AGENT_NAME="${2:-}"
TASK_TYPE="${3:-}"
FILE_PATH="${4:-}"

# Enhanced Configuration
PROJECT_NAME="{{PROJECT_NAME}}"
PROJECT_TYPE="{{PROJECT_TYPE}}"
VALIDATION_DIR="docs/validation"
DISABLE_GATES="${BMAD_DISABLE_GATES:-0}"

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
GRAY='\033[0;90m'
NC='\033[0m'

# Configurable minimum scores by validation type
MIN_SCORES_ARCH="${BMAD_ARCH_MIN_SCORE:-8}"
MIN_SCORES_PRD="${BMAD_PRD_MIN_SCORE:-8}"
MIN_SCORES_SETUP="${BMAD_SETUP_MIN_SCORE:-7}"
MIN_SCORES_STORY="${BMAD_STORY_MIN_SCORE:-7}"
MIN_SCORES_DOD="${BMAD_DOD_MIN_SCORE:-9}"
MIN_SCORES_CHANGE="${BMAD_CHANGE_MIN_SCORE:-7}"

# Ensure validation directory exists
mkdir -p "$VALIDATION_DIR"

# Function to get validation status
get_validation_status() {
    local validation_type="$1"
    local identifier="$2"
    
    local pattern="$VALIDATION_DIR/${validation_type}-*${identifier}*.md"
    local latest_validation=$(ls -t $pattern 2>/dev/null | head -1)
    
    if [ -n "$latest_validation" ] && [ -f "$latest_validation" ]; then
        local content=$(cat "$latest_validation")
        
        # Extract score
        local score=0
        if echo "$content" | grep -qE "Overall.*Score.*([0-9]+)/10"; then
            score=$(echo "$content" | grep -oE "Overall.*Score.*([0-9]+)/10" | grep -oE "[0-9]+" | head -1)
        fi
        
        # Extract status
        local status="UNKNOWN"
        if echo "$content" | grep -qE "\*\*APPROVED\*\*|‚úÖ.*APPROVED"; then
            status="APPROVED"
        elif echo "$content" | grep -qE "\*\*CONDITIONAL\*\*|‚ö†Ô∏è"; then
            status="CONDITIONAL"
        elif echo "$content" | grep -qE "\*\*REJECTED\*\*|‚ùå.*REJECTED"; then
            status="REJECTED"
        fi
        
        echo "$score|$status|$(basename "$latest_validation")|$(stat -c %y "$latest_validation" 2>/dev/null || stat -f "%Sm" "$latest_validation" 2>/dev/null)"
        return 0
    fi
    
    return 1
}

# Function to enforce validation gate
enforce_validation_gate() {
    local validation_type="$1"
    local identifier="$2"
    local min_score="${3:-8}"
    local document_path="${4:-}"
    
    if [ "$DISABLE_GATES" = "1" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Validation gates disabled (BMAD_DISABLE_GATES=1)${NC}"
        return 0
    fi
    
    local validation_result
    if ! validation_result=$(get_validation_status "$validation_type" "$identifier"); then
        echo -e "${YELLOW}‚ö†Ô∏è VALIDATION REQUIRED: No $validation_type validation found for $identifier${NC}"
        echo "Please complete validation before proceeding."
        return 1
    fi
    
    local score=$(echo "$validation_result" | cut -d'|' -f1)
    local status=$(echo "$validation_result" | cut -d'|' -f2)
    
    # Check score
    if [ "$score" -lt "$min_score" ]; then
        echo -e "${RED}‚ùå VALIDATION FAILED: $validation_type score $score/10 is below minimum $min_score/10${NC}"
        return 1
    fi
    
    # Check status
    case "$status" in
        "APPROVED"|"GO"|"READY"|"DONE")
            echo -e "${GREEN}‚úÖ Validation Passed: $validation_type (Score: $score/10, Status: $status)${NC}"
            return 0
            ;;
        "CONDITIONAL")
            echo -e "${YELLOW}‚ö†Ô∏è CONDITIONAL APPROVAL: $validation_type has conditions${NC}"
            return 0
            ;;
        *)
            echo -e "${RED}‚ùå VALIDATION BLOCKED: $validation_type status is $status${NC}"
            return 1
            ;;
    esac
}

# Main enforcement logic
case "$EVENT_TYPE" in
    "validation-status")
        echo -e "\n${CYAN}üìä Current Validation Status for $PROJECT_NAME${NC}"
        echo "============================================="
        
        if [ "$DISABLE_GATES" = "1" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è Validation gates are DISABLED${NC}"
        else
            echo -e "${GREEN}‚úÖ Validation gates are ENABLED${NC}"
        fi
        
        echo "============================================="
        ;;
        
    "pre-story-development")
        echo -e "\n${CYAN}üîç Enforcing Story Readiness Gate...${NC}"
        
        story_id="${STORY_ID:-current}"
        if ! enforce_validation_gate "story-draft" "$story_id" "$MIN_SCORES_STORY"; then
            echo -e "${RED}Story not ready for development${NC}"
            exit 1
        fi
        ;;
        
    *)
        if [ -n "$EVENT_TYPE" ]; then
            echo "No validation enforcement for event type: $EVENT_TYPE"
        fi
        ;;
esac

# Success message
if [ "$EVENT_TYPE" != "validation-status" ] && [ -n "$EVENT_TYPE" ]; then
    echo -e "\n${GREEN}‚úÖ All validation gates passed successfully!${NC}"
fi