version: '3.8'

services:
  game:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "{{FRONTEND_PORT}}:{{FRONTEND_PORT}}"
    volumes:
      - ./src:/app/src
      - ./assets:/app/assets
      - ./index.html:/app/index.html
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT={{FRONTEND_PORT}}
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:{{FRONTEND_PORT}}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Optional: Game server for multiplayer
  game-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "{{BACKEND_PORT}}:{{BACKEND_PORT}}"
      - "3001:3001"  # WebSocket port
    volumes:
      - ./server:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT={{BACKEND_PORT}}
      - WS_PORT=3001
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:{{BACKEND_PORT}}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis for session/state management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: nginx for production-like serving
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./dist:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - game

volumes:
  redis_data:

networks:
  default:
    name: {{PROJECT_NAME}}_game_network